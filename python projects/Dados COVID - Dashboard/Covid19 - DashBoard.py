# -*- coding: utf-8 -*-
"""TP1_Visualização_de_Dados.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1PyVrhfrReuV8Y823ZO0mLuL8vBrUA3kG

# Preparação do ambiente

Import das bibliotecas
"""

import sys
import numpy as np
import pandas as pd
import plotly as pltly
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import math
import time
import warnings
warnings.filterwarnings("ignore")

"""Leitura do CSV do Kaggle"""

fname = "owid-covid-data.csv"
#fulldata = np.loadtxt(open(fname,"rb"), delimiter=",", skiprows=0, dtype=str)
DadosDF = pd.read_csv("https://raw.githubusercontent.com/guilhermebarbosa25/TP1VisuDados/main/owid-covid-data.csv")

"""# Primeiros Gráficos"""

px.scatter(DadosDF,x='date',y='new_cases')

"""#Grafico de Casos e Mortes do Mundo
plotado a partir dos dados cuja location é World
"""

isWorld = DadosDF['location'] == 'World'
DadosWorld = DadosDF[isWorld]

subfig = make_subplots(specs=[[{"secondary_y": True}]])
subfig.add_trace(go.Scatter(x=DadosWorld['date'],y=DadosWorld['total_cases'], name='Casos'), secondary_y=False,)
subfig.add_trace(go.Scatter(x=DadosWorld['date'],y=DadosWorld['total_deaths'], name='Mortes'), secondary_y=True,)
subfig.update_yaxes(title_text="<b>Casos</b>", secondary_y=False)
subfig.update_yaxes(title_text="<b>Mortes</b>", secondary_y=True)
subfig.layout.xaxis.title="Data"
subfig.for_each_trace(lambda t: t.update(line=dict(color=t.marker.color)))
subfig.show()

"""#Grafico de Total de Casos por milhao de habitantes sobre IDH por Continente"""

DadosAfrica = DadosDF[ DadosDF['continent'] == 'Africa']
DadosAfrica.sort_values(by=['date'])
SingleAfrica = DadosAfrica.drop_duplicates(subset="location", keep='last', inplace=False)
idh_valores = SingleAfrica['human_development_index'] !=""
mediaIDH = SingleAfrica[idh_valores]
totalpop = mediaIDH['population'].astype('float64').sum()
mediaIDHAfrica = (mediaIDH['human_development_index'].astype('float64')*mediaIDH['population'].astype('float64')).sum()/(totalpop.sum())

africa_prepared = DadosDF[DadosDF['location']=="Africa"]
africa_prepared['casos_idh']=africa_prepared['total_cases_per_million'].astype('float64')/mediaIDHAfrica
africa_prepared['mortes_idh']=africa_prepared['total_deaths'].astype('float64')/mediaIDHAfrica

DadosEurope = DadosDF[DadosDF['continent'] == 'Europe']
DadosEurope.sort_values(by=['date'])
SingleEurope = DadosEurope.drop_duplicates(subset="location", keep='last', inplace=False)
idh_valores = SingleEurope['human_development_index'] !=""
mediaIDH = SingleEurope[idh_valores]
totalpop = mediaIDH['population'].astype('float64').sum()
mediaIDHEurope= (mediaIDH['human_development_index'].astype('float64')*mediaIDH['population'].astype('float64')).sum()/(totalpop.sum())

Europe_prepared = DadosDF[DadosDF['location']=="Europe"]
Europe_prepared['casos_idh']=Europe_prepared['total_cases_per_million'].astype('float64')/mediaIDHEurope
Europe_prepared['mortes_idh']=Europe_prepared['total_deaths'].astype('float64')/mediaIDHEurope

DadosNA = DadosDF[DadosDF['continent'] == 'North America']
DadosNA.sort_values(by=['date'])
SingleNA = DadosNA.drop_duplicates(subset="location", keep='last', inplace=False)
idh_valores = SingleNA['human_development_index'] !=""
mediaIDH = SingleNA[idh_valores]
totalpop = mediaIDH['population'].astype('float64').sum()
mediaIDHNA= (mediaIDH['human_development_index'].astype('float64')*mediaIDH['population'].astype('float64')).sum()/(totalpop.sum())

NA_prepared = DadosDF[DadosDF['location']=="North America"]
NA_prepared['casos_idh']=NA_prepared['total_cases_per_million'].astype('float64')/mediaIDHNA
NA_prepared['mortes_idh']=NA_prepared['total_deaths'].astype('float64')/mediaIDHNA

DadosSA = DadosDF[DadosDF['continent'] == 'South America']
DadosSA.sort_values(by=['date'])
SingleSA = DadosSA.drop_duplicates(subset="location", keep='last', inplace=False)
idh_valores = SingleSA['human_development_index'] !=""
mediaIDH = SingleSA[idh_valores]
totalpop = mediaIDH['population'].astype('float64').sum()
mediaIDHSA= (mediaIDH['human_development_index'].astype('float64')*mediaIDH['population'].astype('float64')).sum()/(totalpop.sum())

SA_prepared = DadosDF[DadosDF['location']=="South America"]
SA_prepared['casos_idh']=SA_prepared['total_cases_per_million'].astype('float64')/mediaIDHSA
SA_prepared['mortes_idh']=SA_prepared['total_deaths'].astype('float64')/mediaIDHSA

DadosAsia = DadosDF[DadosDF['continent'] == 'Asia']
DadosAsia.sort_values(by=['date'])
SingleAsia = DadosAsia.drop_duplicates(subset="location", keep='last', inplace=False)
idh_valores = SingleAsia['human_development_index'] !=""
mediaIDH = SingleAsia[idh_valores]
totalpop = mediaIDH['population'].astype('float64').sum()
mediaIDHAsia= (mediaIDH['human_development_index'].astype('float64')*mediaIDH['population'].astype('float64')).sum()/(totalpop.sum())

Asia_prepared = DadosDF[DadosDF['location']=="Asia"]
Asia_prepared['casos_idh']=Asia_prepared['total_cases_per_million'].astype('float64')/mediaIDHAsia
Asia_prepared['mortes_idh']=Asia_prepared['total_deaths'].astype('float64')/mediaIDHAsia

DadosOceania = DadosDF[DadosDF['continent'] == 'Asia']
DadosOceania.sort_values(by=['date'])
SingleOceania = DadosOceania.drop_duplicates(subset="location", keep='last', inplace=False)
idh_valores = SingleOceania['human_development_index'] !=""
mediaIDH = SingleOceania[idh_valores]
totalpop = mediaIDH['population'].astype('float64').sum()
mediaIDHOceania= (mediaIDH['human_development_index'].astype('float64')*mediaIDH['population'].astype('float64')).sum()/(totalpop.sum())

Oceania_prepared = DadosDF[DadosDF['location']=="Oceania"]
Oceania_prepared['casos_idh']=Oceania_prepared['total_cases_per_million'].astype('float64')/mediaIDHOceania
Oceania_prepared['mortes_idh']=Oceania_prepared['total_deaths'].astype('float64')/mediaIDHOceania

graf4 = make_subplots(specs=[[{"secondary_y": True}]])
graf4.add_trace(go.Scatter(x=africa_prepared['date'],y=africa_prepared['casos_idh'], name='Casos Africa'), secondary_y=False,)
graf4.add_trace(go.Scatter(x=Europe_prepared['date'],y=Europe_prepared['casos_idh'], name='Casos Europe'), secondary_y=False,)
graf4.add_trace(go.Scatter(x=NA_prepared['date'],y=NA_prepared['casos_idh'], name='Casos NA'), secondary_y=False,)
graf4.add_trace(go.Scatter(x=SA_prepared['date'],y=SA_prepared['casos_idh'], name='Casos SA'), secondary_y=False,)
graf4.add_trace(go.Scatter(x=Asia_prepared['date'],y=Asia_prepared['casos_idh'], name='Casos Asia'), secondary_y=False,)
graf4.add_trace(go.Scatter(x=Oceania_prepared['date'],y=Oceania_prepared['casos_idh'], name='Casos Oceania'), secondary_y=False,)
graf4.for_each_trace(lambda t: t.update(line=dict(color=t.marker.color)))
#graf4.update_traces(mode="markers+lines")
graf4.update_layout(hovermode="x")

graf5 = make_subplots(specs=[[{"secondary_y": True}]])
graf5.add_trace(go.Scatter(x=africa_prepared['date'],y=africa_prepared['total_cases_per_million'], name='Casos Africa'), secondary_y=False,)
graf5.add_trace(go.Scatter(x=Europe_prepared['date'],y=Europe_prepared['total_cases_per_million'], name='Casos Europe'), secondary_y=False,)
graf5.add_trace(go.Scatter(x=NA_prepared['date'],y=NA_prepared['total_cases_per_million'], name='Casos NA'), secondary_y=False,)
graf5.add_trace(go.Scatter(x=SA_prepared['date'],y=SA_prepared['total_cases_per_million'], name='Casos SA'), secondary_y=False,)
graf5.add_trace(go.Scatter(x=Asia_prepared['date'],y=Asia_prepared['total_cases_per_million'], name='Casos Asia'), secondary_y=False,)
graf5.add_trace(go.Scatter(x=Oceania_prepared['date'],y=Oceania_prepared['total_cases_per_million'], name='Casos Oceania'), secondary_y=False,)

graf5.add_trace(go.Scatter(x=africa_prepared['date'],y=africa_prepared['total_deaths_per_million'], name='Mortes Africa'), secondary_y=True,)
graf5.add_trace(go.Scatter(x=Europe_prepared['date'],y=Europe_prepared['total_deaths_per_million'], name='Mortes Europe'), secondary_y=True,)
graf5.add_trace(go.Scatter(x=NA_prepared['date'],y=NA_prepared['total_deaths_per_million'], name='Mortes NA'), secondary_y=True,)
graf5.add_trace(go.Scatter(x=SA_prepared['date'],y=SA_prepared['total_deaths_per_million'], name='Mortes SA'), secondary_y=True,)
graf5.add_trace(go.Scatter(x=Asia_prepared['date'],y=Asia_prepared['total_deaths_per_million'], name='Mortes Asia'), secondary_y=True,)
graf5.add_trace(go.Scatter(x=Oceania_prepared['date'],y=Oceania_prepared['total_deaths_per_million'], name='Mortes Oceania'), secondary_y=True,)
graf5.for_each_trace(lambda t: t.update(line=dict(color=t.marker.color)))
graf5.update_layout(hovermode="x")









